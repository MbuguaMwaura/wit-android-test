apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "me.hhac.android.greetings"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def props = new Properties()
        file("$rootDir/local.properties").withInputStream { props.load(it) }

        def greetings_url = props.getProperty("greetings.url")

        if (greetings_url == null || greetings_url.trim().isEmpty()) {
            greetings_url = "localhost"
            def warning_ip_address_message = "Default URL Address is ${greetings_url}.\n" +
                    "If you want to use a custom URL address for this service set it the \"greetings.url\" constant in the\n" +
                    "${rootDir.path}/local.properties file."

            println warning_ip_address_message
        }

        buildConfigField "String", "URL_DEVICE", "\"" + greetings_url + "\""

        if (greetings_url == "localhost" || greetings_url == "127.0.0.1") {
            buildConfigField "String", "URL_EMULATOR", "\"10.0.2.2\""
        } else {
            buildConfigField "String", "URL_EMULATOR", "URL_DEVICE"
        }

        def greetings_port = props.getProperty("greetings.port")

        if (greetings_port == null || greetings_port.trim().isEmpty()) {
            greetings_port = "8080"

            def warning_port_message = "Default port is ${greetings_port}.\n" +
                    "If you want to use a custom port for this service set it the \"greetings.port\" constant in the\n" +
                    "${rootDir.path}/local.properties file."

            println warning_port_message
        }

        buildConfigField "String", "PORT", "\"" + greetings_port + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // STOMP
    implementation "com.github.NaikSoftware:StompProtocolAndroid:$stomp_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"

    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation("com.squareup.moshi:moshi-kotlin:$moshi_version")
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

}
